package it.cle.project.model.composti.npi;

import it.cle.project.validator.annotation.ValidateIntegerSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.hibernate.annotations.Type;

@Entity
@Table(name = "attivita_motoria_aberrante")
@XmlRootElement(name="attivita_motoria_aberrante")
@XmlAccessorType(XmlAccessType.FIELD)
public class AttivitaMotoriaAberrante {

	/** The id AttivitaMotoriaAberrante */
	private Integer idAttivitaMotoriaAberrante;
	
	/** Questo flag indica se il questionario è applicabile o meno */
	private Boolean nonApplicabile;
	
	/** Questo campo indica la motivazione in caso di non applicabilità */
	private String motivazione;
	
	/** 
	 * Questo campo indica la seguente domanda: 
	 * Il paziente continua a camminare, continua a fare e rifare le stesse cose come aprire gli armadi o i 
	 * cassetti, oppure sposta in continuazione gli oggetti o attorciglia le stringhe od i lacci?
	 *  
	 * NO (se no, procedere con la successiva domanda di screening) 
	 * SÌ (procedere con le seguenti domande)
	*/
	private Boolean domandaPreliminare;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente cammina per la casa senza un preciso scopo?
	 * */
	private Integer fDomandaCammina;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente cammina per la casa senza un preciso scopo?
	 * */
	private Integer gDomandaCammina;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente si aggira per la casa aprendo e rovistando cassetti ed armadi?
	 * */
	private Integer fDomandaRovistaCassetti;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente si aggira per la casa aprendo e rovistando cassetti ed armadi?
	 * */
	private Integer gDomandaRovistaCassetti;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente continua a mettere e togliersi i vestiti?
	 * */
	private Integer fDomandaVestiti;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente continua a mettere e togliersi i vestiti?
	 * */
	private Integer gDomandaVestiti;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente fa azioni o particolari movimenti che continua a ripetere?
	 * */
	private Integer fDomandaAzioniRipetute;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente fa azioni o particolari movimenti che continua a ripetere?
	 * */
	private Integer gDomandaAzioniRipetute;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente tende a ripetere continuamente determinati gesti quali abbottonarsi, afferrare, slacciarsi le stringhe ecc.?
	 * */
	private Integer fDomandaAzioniRipetuteContinuamente;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente tende a ripetere continuamente determinati gesti quali abbottonarsi, afferrare, slacciarsi le stringhe ecc.?
	 * */
	private Integer gDomandaAzioniRipetuteContinuamente;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column
	public Integer getIdAttivitaMotoriaAberrante() {
		return idAttivitaMotoriaAberrante;
	}

	public void setIdAttivitaMotoriaAberrante(Integer idAttivitaMotoriaAberrante) {
		this.idAttivitaMotoriaAberrante = idAttivitaMotoriaAberrante;
	}

	@NotNull
	@Type(type = "boolean")
	@Column(name = "non_applicabile")
	public Boolean getNonApplicabile() {
		return nonApplicabile;
	}

	public void setNonApplicabile(Boolean nonApplicabile) {
		this.nonApplicabile = nonApplicabile;
	}

	@Column(name = "motivazione")
	public String getMotivazione() {
		return motivazione;
	}

	public void setMotivazione(String motivazione) {
		this.motivazione = motivazione;
	}

	@Type(type = "boolean")
	@Column(name = "domanda_preliminare")
	public Boolean getDomandaPreliminare() {
		return domandaPreliminare;
	}

	public void setDomandaPreliminare(Boolean domandaPreliminare) {
		this.domandaPreliminare = domandaPreliminare;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_cammina")
	public Integer getfDomandaCammina() {
		return fDomandaCammina;
	}

	public void setfDomandaCammina(Integer fDomandaCammina) {
		this.fDomandaCammina = fDomandaCammina;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_cammina")
	public Integer getgDomandaCammina() {
		return gDomandaCammina;
	}

	public void setgDomandaCammina(Integer gDomandaCammina) {
		this.gDomandaCammina = gDomandaCammina;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_rovista_cassetti")
	public Integer getfDomandaRovistaCassetti() {
		return fDomandaRovistaCassetti;
	}

	public void setfDomandaRovistaCassetti(Integer fDomandaRovistaCassetti) {
		this.fDomandaRovistaCassetti = fDomandaRovistaCassetti;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_rovista_cassetti")
	public Integer getgDomandaRovistaCassetti() {
		return gDomandaRovistaCassetti;
	}

	public void setgDomandaRovistaCassetti(Integer gDomandaRovistaCassetti) {
		this.gDomandaRovistaCassetti = gDomandaRovistaCassetti;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_vestiti")
	public Integer getfDomandaVestiti() {
		return fDomandaVestiti;
	}

	public void setfDomandaVestiti(Integer fDomandaVestiti) {
		this.fDomandaVestiti = fDomandaVestiti;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_vestiti")
	public Integer getgDomandaVestiti() {
		return gDomandaVestiti;
	}

	public void setgDomandaVestiti(Integer gDomandaVestiti) {
		this.gDomandaVestiti = gDomandaVestiti;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_azioni_ripetute")
	public Integer getfDomandaAzioniRipetute() {
		return fDomandaAzioniRipetute;
	}

	public void setfDomandaAzioniRipetute(Integer fDomandaAzioniRipetute) {
		this.fDomandaAzioniRipetute = fDomandaAzioniRipetute;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_azioni_ripetute")
	public Integer getgDomandaAzioniRipetute() {
		return gDomandaAzioniRipetute;
	}

	public void setgDomandaAzioniRipetute(Integer gDomandaAzioniRipetute) {
		this.gDomandaAzioniRipetute = gDomandaAzioniRipetute;
	}
	
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_azioni_ripetute_continuamente")
	public Integer getfDomandaAzioniRipetuteContinuamente() {
		return fDomandaAzioniRipetuteContinuamente;
	}

	public void setfDomandaAzioniRipetuteContinuamente(Integer fDomandaAzioniRipetuteContinuamente) {
		this.fDomandaAzioniRipetuteContinuamente = fDomandaAzioniRipetuteContinuamente;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_azioni_ripetute_continuamente")
	public Integer getgDomandaAzioniRipetuteContinuamente() {
		return gDomandaAzioniRipetuteContinuamente;
	}

	public void setgDomandaAzioniRipetuteContinuamente(Integer gDomandaAzioniRipetuteContinuamente) {
		this.gDomandaAzioniRipetuteContinuamente = gDomandaAzioniRipetuteContinuamente;
	}
	
	
}
