package it.cle.project.model.composti.npi;

import it.cle.project.validator.annotation.ValidateIntegerSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.hibernate.annotations.Type;

@Entity
@Table(name = "irritabilita_labilita")
@XmlRootElement(name="irritabilita_labilita")
@XmlAccessorType(XmlAccessType.FIELD)
public class IrritabilitaLabilita {
	
	/** The id IrritabilitaLabilita */
	private Integer idIrritabilitaLabilita;
	
	/** Questo flag indica se il questionario è applicabile o meno */
	private Boolean nonApplicabile;
	
	/** Questo campo indica la motivazione in caso di non applicabilità */
	private String motivazione;
	
	/** 
	 * Questo campo indica la seguente domanda:  
	 * Il paziente si irrita o si arrabbia con facilità? Il suo umore è molto variabile? È impaziente in modo 
	 * anormale? Non intendiamo frustrazione per le difficoltà di memoria o l'incapacità di compiere 
	 * semplici operazioni; vogliamo sapere se il paziente presenta un'irritabilità anomala, impazienza o 
	 * rapidi cambiamenti di umore che si differenziano dal solito.
	 *  
	 * NO (se no, procedere con la successiva domanda di screening) 
	 * SÌ (procedere con le seguenti domande)
	*/
	private Boolean domandaPreliminare;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente ha un brutto carattere, "perde le staffe" per piccole cose?
	 * */
	private Integer fDomandaBruttoCarattere;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente ha un brutto carattere, "perde le staffe" per piccole cose?
	 * */
	private Integer gDomandaBruttoCarattere;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente presenta rapidi cambiamenti di umore, passando dalla serenità alla rabbia?
	 * */
	private Integer fDomandaCambiamentiUmore;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente presenta rapidi cambiamenti di umore, passando dalla serenità alla rabbia?
	 * */
	private Integer gDomandaCambiamentiUmore;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente presenta improvvisi momenti di rabbia?
	 * */
	private Integer fDomandaRabbia;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente presenta improvvisi momenti di rabbia?
	 * */
	private Integer gDomandaRabbia;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente è insofferente, si innervosisce per i ritardi o attende ansiosamente di portare a termine le cose che aveva programmato?
	 * */
	private Integer fDomandaInsofferente;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente è insofferente, si innervosisce per i ritardi o attende ansiosamente di portare a termine le cose che aveva programmato?
	 * */
	private Integer gDomandaInsofferente;	
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente è irritabile e nervoso?
	 * */
	private Integer fDomandaNervoso;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente è irritabile e nervoso?
	 * */
	private Integer gDomandaNervoso;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente borbotta frequentemente e risulta difficile sopportarlo?
	 * */
	private Integer fDomandaBorbotta;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente borbotta frequentemente e risulta difficile sopportarlo?
	 * */
	private Integer gDomandaBorbotta;	
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente presenta altri segni di irritabilità?
	 * */
	private Integer fDomandaAltriSegni;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente presenta altri segni di irritabilità?
	 * */
	private Integer gDomandaAltriSegni;
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column
	public Integer getIdIrritabilitaLabilita() {
		return idIrritabilitaLabilita;
	}

	public void setIdIrritabilitaLabilita(Integer idIrritabilitaLabilita) {
		this.idIrritabilitaLabilita = idIrritabilitaLabilita;
	}

	@NotNull
	@Type(type = "boolean")
	@Column(name = "non_applicabile")
	public Boolean getNonApplicabile() {
		return nonApplicabile;
	}

	public void setNonApplicabile(Boolean nonApplicabile) {
		this.nonApplicabile = nonApplicabile;
	}

	@Column(name = "motivazione")
	public String getMotivazione() {
		return motivazione;
	}

	public void setMotivazione(String motivazione) {
		this.motivazione = motivazione;
	}

	@NotNull
	@Type(type = "boolean")
	@Column(name = "domanda_preliminare")
	public Boolean getDomandaPreliminare() {
		return domandaPreliminare;
	}

	public void setDomandaPreliminare(Boolean domandaPreliminare) {
		this.domandaPreliminare = domandaPreliminare;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_brutto_carattere")
	public Integer getfDomandaBruttoCarattere() {
		return fDomandaBruttoCarattere;
	}

	public void setfDomandaBruttoCarattere(Integer fDomandaBruttoCarattere) {
		this.fDomandaBruttoCarattere = fDomandaBruttoCarattere;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_brutto_carattere")
	public Integer getgDomandaBruttoCarattere() {
		return gDomandaBruttoCarattere;
	}

	public void setgDomandaBruttoCarattere(Integer gDomandaBruttoCarattere) {
		this.gDomandaBruttoCarattere = gDomandaBruttoCarattere;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_cambiamenti_umore")
	public Integer getfDomandaCambiamentiUmore() {
		return fDomandaCambiamentiUmore;
	}

	public void setfDomandaCambiamentiUmore(Integer fDomandaCambiamentiUmore) {
		this.fDomandaCambiamentiUmore = fDomandaCambiamentiUmore;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_cambiamenti_umore")
	public Integer getgDomandaCambiamentiUmore() {
		return gDomandaCambiamentiUmore;
	}

	public void setgDomandaCambiamentiUmore(Integer gDomandaCambiamentiUmore) {
		this.gDomandaCambiamentiUmore = gDomandaCambiamentiUmore;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_rabbia")
	public Integer getfDomandaRabbia() {
		return fDomandaRabbia;
	}

	public void setfDomandaRabbia(Integer fDomandaRabbia) {
		this.fDomandaRabbia = fDomandaRabbia;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_rabbia")
	public Integer getgDomandaRabbia() {
		return gDomandaRabbia;
	}

	public void setgDomandaRabbia(Integer gDomandaRabbia) {
		this.gDomandaRabbia = gDomandaRabbia;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_insofferente")
	public Integer getfDomandaInsofferente() {
		return fDomandaInsofferente;
	}

	public void setfDomandaInsofferente(Integer fDomandaInsofferente) {
		this.fDomandaInsofferente = fDomandaInsofferente;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_insofferente")
	public Integer getgDomandaInsofferente() {
		return gDomandaInsofferente;
	}

	public void setgDomandaInsofferente(Integer gDomandaInsofferente) {
		this.gDomandaInsofferente = gDomandaInsofferente;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_nervoso")
	public Integer getfDomandaNervoso() {
		return fDomandaNervoso;
	}

	public void setfDomandaNervoso(Integer fDomandaNervoso) {
		this.fDomandaNervoso = fDomandaNervoso;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_nervoso")
	public Integer getgDomandaNervoso() {
		return gDomandaNervoso;
	}

	public void setgDomandaNervoso(Integer gDomandaNervoso) {
		this.gDomandaNervoso = gDomandaNervoso;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_borbotta")
	public Integer getfDomandaBorbotta() {
		return fDomandaBorbotta;
	}

	public void setfDomandaBorbotta(Integer fDomandaBorbotta) {
		this.fDomandaBorbotta = fDomandaBorbotta;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_borbotta")
	public Integer getgDomandaBorbotta() {
		return gDomandaBorbotta;
	}

	public void setgDomandaBorbotta(Integer gDomandaBorbotta) {
		this.gDomandaBorbotta = gDomandaBorbotta;
	}

	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_altri_segni")
	public Integer getfDomandaAltriSegni() {
		return fDomandaAltriSegni;
	}

	public void setfDomandaAltriSegni(Integer fDomandaAltriSegni) {
		this.fDomandaAltriSegni = fDomandaAltriSegni;
	}

	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_altri_segni")
	public Integer getgDomandaAltriSegni() {
		return gDomandaAltriSegni;
	}

	public void setgDomandaAltriSegni(Integer gDomandaAltriSegni) {
		this.gDomandaAltriSegni = gDomandaAltriSegni;
	}	
	

}
