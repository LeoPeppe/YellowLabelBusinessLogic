package it.cle.project.model.composti.npi;

import it.cle.project.validator.annotation.ValidateIntegerSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.hibernate.annotations.Type;

/**
 * The Class AttivitaMotoriaAberrante.
 */
@Entity
@Table(name = "attivita_motoria_aberrante")
@XmlRootElement(name="attivita_motoria_aberrante")
@XmlAccessorType(XmlAccessType.FIELD)
public class AttivitaMotoriaAberrante {

	/**  The id AttivitaMotoriaAberrante. */
	private Integer idAttivitaMotoriaAberrante;
	
	/**  Questo flag indica se il questionario è applicabile o meno. */
	private Boolean nonApplicabile;
	
	/**  Questo campo indica la motivazione in caso di non applicabilità. */
	private String motivazione;
	
	/**   Questo campo indica la seguente domanda:  Il paziente continua a camminare, continua a fare e rifare le stesse cose come aprire gli armadi o i  cassetti, oppure sposta in continuazione gli oggetti o attorciglia le stringhe od i lacci?   NO (se no, procedere con la successiva domanda di screening)  SÌ (procedere con le seguenti domande). */
	private Boolean domandaPreliminare;
	
	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente cammina per la casa senza un preciso scopo?. */
	private Integer fDomandaCammina;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente cammina per la casa senza un preciso scopo?. */
	private Integer gDomandaCammina;
	
	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente si aggira per la casa aprendo e rovistando cassetti ed armadi?. */
	private Integer fDomandaRovistaCassetti;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente si aggira per la casa aprendo e rovistando cassetti ed armadi?. */
	private Integer gDomandaRovistaCassetti;
	
	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente continua a mettere e togliersi i vestiti?. */
	private Integer fDomandaVestiti;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente continua a mettere e togliersi i vestiti?. */
	private Integer gDomandaVestiti;
	
	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente fa azioni o particolari movimenti che continua a ripetere?. */
	private Integer fDomandaAzioniRipetute;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente fa azioni o particolari movimenti che continua a ripetere?. */
	private Integer gDomandaAzioniRipetute;
	
	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente tende a ripetere continuamente determinati gesti quali abbottonarsi, afferrare, slacciarsi le stringhe ecc.?
	 * */
	private Integer fDomandaAzioniRipetuteContinuamente;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente tende a ripetere continuamente determinati gesti quali abbottonarsi, afferrare, slacciarsi le stringhe ecc.?
	 * */
	private Integer gDomandaAzioniRipetuteContinuamente;

	/**
	 * Gets the id attivita motoria aberrante.
	 *
	 * @return the id attivita motoria aberrante
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column
	public Integer getIdAttivitaMotoriaAberrante() {
		return idAttivitaMotoriaAberrante;
	}

	/**
	 * Sets the id attivita motoria aberrante.
	 *
	 * @param idAttivitaMotoriaAberrante the new id attivita motoria aberrante
	 */
	public void setIdAttivitaMotoriaAberrante(Integer idAttivitaMotoriaAberrante) {
		this.idAttivitaMotoriaAberrante = idAttivitaMotoriaAberrante;
	}

	/**
	 * Gets the non applicabile.
	 *
	 * @return the non applicabile
	 */
	@NotNull
	@Type(type = "boolean")
	@Column(name = "non_applicabile")
	public Boolean getNonApplicabile() {
		return nonApplicabile;
	}

	/**
	 * Sets the non applicabile.
	 *
	 * @param nonApplicabile the new non applicabile
	 */
	public void setNonApplicabile(Boolean nonApplicabile) {
		this.nonApplicabile = nonApplicabile;
	}

	/**
	 * Gets the motivazione.
	 *
	 * @return the motivazione
	 */
	@Column(name = "motivazione")
	public String getMotivazione() {
		return motivazione;
	}

	/**
	 * Sets the motivazione.
	 *
	 * @param motivazione the new motivazione
	 */
	public void setMotivazione(String motivazione) {
		this.motivazione = motivazione;
	}

	/**
	 * Gets the domanda preliminare.
	 *
	 * @return the domanda preliminare
	 */
	@Type(type = "boolean")
	@Column(name = "domanda_preliminare")
	public Boolean getDomandaPreliminare() {
		return domandaPreliminare;
	}

	/**
	 * Sets the domanda preliminare.
	 *
	 * @param domandaPreliminare the new domanda preliminare
	 */
	public void setDomandaPreliminare(Boolean domandaPreliminare) {
		this.domandaPreliminare = domandaPreliminare;
	}

	/**
	 * Gets the f domanda cammina.
	 *
	 * @return the f domanda cammina
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_cammina")
	public Integer getfDomandaCammina() {
		return fDomandaCammina;
	}

	/**
	 * Sets the f domanda cammina.
	 *
	 * @param fDomandaCammina the new f domanda cammina
	 */
	public void setfDomandaCammina(Integer fDomandaCammina) {
		this.fDomandaCammina = fDomandaCammina;
	}

	/**
	 * Gets the g domanda cammina.
	 *
	 * @return the g domanda cammina
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_cammina")
	public Integer getgDomandaCammina() {
		return gDomandaCammina;
	}

	/**
	 * Sets the g domanda cammina.
	 *
	 * @param gDomandaCammina the new g domanda cammina
	 */
	public void setgDomandaCammina(Integer gDomandaCammina) {
		this.gDomandaCammina = gDomandaCammina;
	}

	/**
	 * Gets the f domanda rovista cassetti.
	 *
	 * @return the f domanda rovista cassetti
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_rovista_cassetti")
	public Integer getfDomandaRovistaCassetti() {
		return fDomandaRovistaCassetti;
	}

	/**
	 * Sets the f domanda rovista cassetti.
	 *
	 * @param fDomandaRovistaCassetti the new f domanda rovista cassetti
	 */
	public void setfDomandaRovistaCassetti(Integer fDomandaRovistaCassetti) {
		this.fDomandaRovistaCassetti = fDomandaRovistaCassetti;
	}

	/**
	 * Gets the g domanda rovista cassetti.
	 *
	 * @return the g domanda rovista cassetti
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_rovista_cassetti")
	public Integer getgDomandaRovistaCassetti() {
		return gDomandaRovistaCassetti;
	}

	/**
	 * Sets the g domanda rovista cassetti.
	 *
	 * @param gDomandaRovistaCassetti the new g domanda rovista cassetti
	 */
	public void setgDomandaRovistaCassetti(Integer gDomandaRovistaCassetti) {
		this.gDomandaRovistaCassetti = gDomandaRovistaCassetti;
	}

	/**
	 * Gets the f domanda vestiti.
	 *
	 * @return the f domanda vestiti
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_vestiti")
	public Integer getfDomandaVestiti() {
		return fDomandaVestiti;
	}

	/**
	 * Sets the f domanda vestiti.
	 *
	 * @param fDomandaVestiti the new f domanda vestiti
	 */
	public void setfDomandaVestiti(Integer fDomandaVestiti) {
		this.fDomandaVestiti = fDomandaVestiti;
	}

	/**
	 * Gets the g domanda vestiti.
	 *
	 * @return the g domanda vestiti
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_vestiti")
	public Integer getgDomandaVestiti() {
		return gDomandaVestiti;
	}

	/**
	 * Sets the g domanda vestiti.
	 *
	 * @param gDomandaVestiti the new g domanda vestiti
	 */
	public void setgDomandaVestiti(Integer gDomandaVestiti) {
		this.gDomandaVestiti = gDomandaVestiti;
	}

	/**
	 * Gets the f domanda azioni ripetute.
	 *
	 * @return the f domanda azioni ripetute
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_azioni_ripetute")
	public Integer getfDomandaAzioniRipetute() {
		return fDomandaAzioniRipetute;
	}

	/**
	 * Sets the f domanda azioni ripetute.
	 *
	 * @param fDomandaAzioniRipetute the new f domanda azioni ripetute
	 */
	public void setfDomandaAzioniRipetute(Integer fDomandaAzioniRipetute) {
		this.fDomandaAzioniRipetute = fDomandaAzioniRipetute;
	}

	/**
	 * Gets the g domanda azioni ripetute.
	 *
	 * @return the g domanda azioni ripetute
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_azioni_ripetute")
	public Integer getgDomandaAzioniRipetute() {
		return gDomandaAzioniRipetute;
	}

	/**
	 * Sets the g domanda azioni ripetute.
	 *
	 * @param gDomandaAzioniRipetute the new g domanda azioni ripetute
	 */
	public void setgDomandaAzioniRipetute(Integer gDomandaAzioniRipetute) {
		this.gDomandaAzioniRipetute = gDomandaAzioniRipetute;
	}
	
	/**
	 * Gets the f domanda azioni ripetute continuamente.
	 *
	 * @return the f domanda azioni ripetute continuamente
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_azioni_ripetute_continuamente")
	public Integer getfDomandaAzioniRipetuteContinuamente() {
		return fDomandaAzioniRipetuteContinuamente;
	}

	/**
	 * Sets the f domanda azioni ripetute continuamente.
	 *
	 * @param fDomandaAzioniRipetuteContinuamente the new f domanda azioni ripetute continuamente
	 */
	public void setfDomandaAzioniRipetuteContinuamente(Integer fDomandaAzioniRipetuteContinuamente) {
		this.fDomandaAzioniRipetuteContinuamente = fDomandaAzioniRipetuteContinuamente;
	}

	/**
	 * Gets the g domanda azioni ripetute continuamente.
	 *
	 * @return the g domanda azioni ripetute continuamente
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_azioni_ripetute_continuamente")
	public Integer getgDomandaAzioniRipetuteContinuamente() {
		return gDomandaAzioniRipetuteContinuamente;
	}

	/**
	 * Sets the g domanda azioni ripetute continuamente.
	 *
	 * @param gDomandaAzioniRipetuteContinuamente the new g domanda azioni ripetute continuamente
	 */
	public void setgDomandaAzioniRipetuteContinuamente(Integer gDomandaAzioniRipetuteContinuamente) {
		this.gDomandaAzioniRipetuteContinuamente = gDomandaAzioniRipetuteContinuamente;
	}
	
	
}
