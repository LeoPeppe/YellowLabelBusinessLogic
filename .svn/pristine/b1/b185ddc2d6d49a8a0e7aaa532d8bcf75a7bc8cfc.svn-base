package it.cle.project.model.composti.npi;

import it.cle.project.validator.annotation.ValidateIntegerSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.hibernate.annotations.Type;

/**
 * The Class Allucinazioni.
 */
@Entity
@Table(name = "allucinazioni")
@XmlRootElement(name="allucinazioni")
@XmlAccessorType(XmlAccessType.FIELD)
public class Allucinazioni {
	
	/**  The id Allucinazioni. */
	private Integer idAllucinazioni;
	
	/**  Questo flag indica se il questionario è applicabile o meno. */
	private Boolean nonApplicabile;
	
	/**  Questo campo indica la motivazione in caso di non applicabilità. */
	private String motivazione;
	
	/**   Questo campo indica la seguente domanda:  Il paziente è molto nervoso, allarmato, spaventato senza veri motivi? Sembra molto teso o agitato?  È impaurito dal rimanere lontano da voi?    NO (se no, procedere con la successiva domanda di screening)   SÌ (procedere con le seguenti domande). */
	private Boolean domandaPreliminare;
	
	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente dice di sentire delle voci o si comporta come se le sentisse?. */
	private Integer fDomandaVoci;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente dice di sentire delle voci o si comporta come se le sentisse?. */
	private Integer gDomandaVoci;

	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente parla con persone che non sono presenti?. */
	private Integer fDomandaPersoneNonPresenti;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente parla con persone che non sono presenti?. */
	private Integer gDomandaPersoneNonPresenti;

	/** 
	 * Questo campo indica la frequenza assegnata alla domanda: 
	 * Il paziente riferisce di vedere cose che gli altri non vedono o si comporta come se vedesse cose che gli altri non vedono (come persone, animali, luci..)?
	 * */
	private Integer fDomandaVisioneCose;

	/** 
	 * Questo campo indica la gravità assegnata alla domanda: 
	 * Il paziente riferisce di vedere cose che gli altri non vedono o si comporta come se vedesse cose che gli altri non vedono (come persone, animali, luci..)?
	 * */
	private Integer gDomandaVisioneCose;

	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente dice di sentire odori che gli altri non sentono?	 . */
	private Integer fDomandaOdori;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente dice di sentire odori che gli altri non sentono?	. */
	private Integer gDomandaOdori;

	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente riferisce di sentire cose che strisciano o lo toccano sulla pelle?. */
	private Integer fDomandaToccoPelle;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente riferisce di sentire cose che strisciano o lo toccano sulla pelle?. */
	private Integer gDomandaToccoPelle;

	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente riferisce di percepire sapori senza una causa nota?. */
	private Integer fDomandaSapori;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente riferisce di percepire sapori senza una causa nota?. */
	private Integer gDomandaSapori;

	/**   Questo campo indica la frequenza assegnata alla domanda:  Il paziente riferisce altre esperienze sensoriali insolite?. */
	private Integer fDomandaEsperienzeSensoriali;

	/**   Questo campo indica la gravità assegnata alla domanda:  Il paziente riferisce altre esperienze sensoriali insolite?. */
	private Integer gDomandaEsperienzeSensoriali;

	
	/**
	 * Gets the id allucinazioni.
	 *
	 * @return the id allucinazioni
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column
	public Integer getIdAllucinazioni() {
		return idAllucinazioni;
	}

	/**
	 * Sets the id allucinazioni.
	 *
	 * @param idAllucinazioni the new id allucinazioni
	 */
	public void setIdAllucinazioni(Integer idAllucinazioni) {
		this.idAllucinazioni = idAllucinazioni;
	}

	/**
	 * Gets the non applicabile.
	 *
	 * @return the non applicabile
	 */
	@NotNull
	@Type(type = "boolean")
	@Column(name = "non_applicabile")
	public Boolean getNonApplicabile() {
		return nonApplicabile;
	}

	/**
	 * Sets the non applicabile.
	 *
	 * @param nonApplicabile the new non applicabile
	 */
	public void setNonApplicabile(Boolean nonApplicabile) {
		this.nonApplicabile = nonApplicabile;
	}

	/**
	 * Gets the motivazione.
	 *
	 * @return the motivazione
	 */
	@Column(name = "motivazione")
	public String getMotivazione() {
		return motivazione;
	}

	/**
	 * Sets the motivazione.
	 *
	 * @param motivazione the new motivazione
	 */
	public void setMotivazione(String motivazione) {
		this.motivazione = motivazione;
	}

	/**
	 * Gets the domanda preliminare.
	 *
	 * @return the domanda preliminare
	 */
	@NotNull
	@Type(type = "boolean")
	@Column(name = "domanda_preliminare")
	public Boolean getDomandaPreliminare() {
		return domandaPreliminare;
	}

	/**
	 * Sets the domanda preliminare.
	 *
	 * @param domandaPreliminare the new domanda preliminare
	 */
	public void setDomandaPreliminare(Boolean domandaPreliminare) {
		this.domandaPreliminare = domandaPreliminare;
	}

	/**
	 * Gets the f domanda voci.
	 *
	 * @return the f domanda voci
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_voci")
	public Integer getfDomandaVoci() {
		return fDomandaVoci;
	}

	/**
	 * Sets the f domanda voci.
	 *
	 * @param fDomandaVoci the new f domanda voci
	 */
	public void setfDomandaVoci(Integer fDomandaVoci) {
		this.fDomandaVoci = fDomandaVoci;
	}

	/**
	 * Gets the g domanda voci.
	 *
	 * @return the g domanda voci
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_voci")
	public Integer getgDomandaVoci() {
		return gDomandaVoci;
	}

	/**
	 * Sets the g domanda voci.
	 *
	 * @param gDomandaVoci the new g domanda voci
	 */
	public void setgDomandaVoci(Integer gDomandaVoci) {
		this.gDomandaVoci = gDomandaVoci;
	}

	/**
	 * Gets the f domanda persone non presenti.
	 *
	 * @return the f domanda persone non presenti
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_persone_non_presenti")
	public Integer getfDomandaPersoneNonPresenti() {
		return fDomandaPersoneNonPresenti;
	}

	/**
	 * Sets the f domanda persone non presenti.
	 *
	 * @param fDomandaPersoneNonPresenti the new f domanda persone non presenti
	 */
	public void setfDomandaPersoneNonPresenti(Integer fDomandaPersoneNonPresenti) {
		this.fDomandaPersoneNonPresenti = fDomandaPersoneNonPresenti;
	}

	/**
	 * Gets the g domanda persone non presenti.
	 *
	 * @return the g domanda persone non presenti
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_persone_non_presenti")
	public Integer getgDomandaPersoneNonPresenti() {
		return gDomandaPersoneNonPresenti;
	}

	/**
	 * Sets the g domanda persone non presenti.
	 *
	 * @param gDomandaPersoneNonPresenti the new g domanda persone non presenti
	 */
	public void setgDomandaPersoneNonPresenti(Integer gDomandaPersoneNonPresenti) {
		this.gDomandaPersoneNonPresenti = gDomandaPersoneNonPresenti;
	}

	/**
	 * Gets the f domanda visione cose.
	 *
	 * @return the f domanda visione cose
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_visione_cose")	
	public Integer getfDomandaVisioneCose() {
		return fDomandaVisioneCose;
	}

	/**
	 * Sets the f domanda visione cose.
	 *
	 * @param fDomandaVisioneCose the new f domanda visione cose
	 */
	public void setfDomandaVisioneCose(Integer fDomandaVisioneCose) {
		this.fDomandaVisioneCose = fDomandaVisioneCose;
	}

	/**
	 * Gets the g domanda visione cose.
	 *
	 * @return the g domanda visione cose
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_visione_cose")
	public Integer getgDomandaVisioneCose() {
		return gDomandaVisioneCose;
	}

	/**
	 * Sets the g domanda visione cose.
	 *
	 * @param gDomandaVisioneCose the new g domanda visione cose
	 */
	public void setgDomandaVisioneCose(Integer gDomandaVisioneCose) {
		this.gDomandaVisioneCose = gDomandaVisioneCose;
	}

	/**
	 * Gets the f domanda odori.
	 *
	 * @return the f domanda odori
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_odori")	
	public Integer getfDomandaOdori() {
		return fDomandaOdori;
	}

	/**
	 * Sets the f domanda odori.
	 *
	 * @param fDomandaOdori the new f domanda odori
	 */
	public void setfDomandaOdori(Integer fDomandaOdori) {
		this.fDomandaOdori = fDomandaOdori;
	}

	/**
	 * Gets the g domanda odori.
	 *
	 * @return the g domanda odori
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_odori")
	public Integer getgDomandaOdori() {
		return gDomandaOdori;
	}

	/**
	 * Sets the g domanda odori.
	 *
	 * @param gDomandaOdori the new g domanda odori
	 */
	public void setgDomandaOdori(Integer gDomandaOdori) {
		this.gDomandaOdori = gDomandaOdori;
	}

	/**
	 * Gets the f domanda tocco pelle.
	 *
	 * @return the f domanda tocco pelle
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_tocco_pelle")
	public Integer getfDomandaToccoPelle() {
		return fDomandaToccoPelle;
	}

	/**
	 * Sets the f domanda tocco pelle.
	 *
	 * @param fDomandaToccoPelle the new f domanda tocco pelle
	 */
	public void setfDomandaToccoPelle(Integer fDomandaToccoPelle) {
		this.fDomandaToccoPelle = fDomandaToccoPelle;
	}

	/**
	 * Gets the g domanda tocco pelle.
	 *
	 * @return the g domanda tocco pelle
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_tocco_pelle")
	public Integer getgDomandaToccoPelle() {
		return gDomandaToccoPelle;
	}

	/**
	 * Sets the g domanda tocco pelle.
	 *
	 * @param gDomandaToccoPelle the new g domanda tocco pelle
	 */
	public void setgDomandaToccoPelle(Integer gDomandaToccoPelle) {
		this.gDomandaToccoPelle = gDomandaToccoPelle;
	}

	/**
	 * Gets the f domanda sapori.
	 *
	 * @return the f domanda sapori
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_sapori")
	public Integer getfDomandaSapori() {
		return fDomandaSapori;
	}

	/**
	 * Sets the f domanda sapori.
	 *
	 * @param fDomandaSapori the new f domanda sapori
	 */
	public void setfDomandaSapori(Integer fDomandaSapori) {
		this.fDomandaSapori = fDomandaSapori;
	}

	/**
	 * Gets the g domanda sapori.
	 *
	 * @return the g domanda sapori
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_sapori")
	public Integer getgDomandaSapori() {
		return gDomandaSapori;
	}

	/**
	 * Sets the g domanda sapori.
	 *
	 * @param gDomandaSapori the new g domanda sapori
	 */
	public void setgDomandaSapori(Integer gDomandaSapori) {
		this.gDomandaSapori = gDomandaSapori;
	}

	/**
	 * Gets the f domanda esperienze sensoriali.
	 *
	 * @return the f domanda esperienze sensoriali
	 */
	@ValidateIntegerSet(acceptedValues = { 0,1,2,3,4 })
	@Column(name = "f_domanda_esperienze_sensoriali")
	public Integer getfDomandaEsperienzeSensoriali() {
		return fDomandaEsperienzeSensoriali;
	}

	/**
	 * Sets the f domanda esperienze sensoriali.
	 *
	 * @param fDomandaEsperienzeSensoriali the new f domanda esperienze sensoriali
	 */
	public void setfDomandaEsperienzeSensoriali(Integer fDomandaEsperienzeSensoriali) {
		this.fDomandaEsperienzeSensoriali = fDomandaEsperienzeSensoriali;
	}

	/**
	 * Gets the g domanda esperienze sensoriali.
	 *
	 * @return the g domanda esperienze sensoriali
	 */
	@ValidateIntegerSet(acceptedValues = { 1,2,3 })
	@Column(name = "g_domanda_esperienze_sensoriali")
	public Integer getgDomandaEsperienzeSensoriali() {
		return gDomandaEsperienzeSensoriali;
	}

	/**
	 * Sets the g domanda esperienze sensoriali.
	 *
	 * @param gDomandaEsperienzeSensoriali the new g domanda esperienze sensoriali
	 */
	public void setgDomandaEsperienzeSensoriali(Integer gDomandaEsperienzeSensoriali) {
		this.gDomandaEsperienzeSensoriali = gDomandaEsperienzeSensoriali;
	}
}
