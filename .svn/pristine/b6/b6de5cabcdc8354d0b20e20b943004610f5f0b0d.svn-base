package it.cle.project.config;

import java.util.Properties;

import javax.inject.Inject;
import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate4.HibernateExceptionTranslator;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableTransactionManagement
public class DataConfig {

    private static final Logger log = LoggerFactory.getLogger(DataConfig.class);
    
    //@Autowired
    //@Inject
    //private SessionFactory sessionFactory;

    //@Bean
    //public PlatformTransactionManager transactionManager() {
    //    return new HibernateTransactionManager(sessionFactory);
    //}

    @Bean
    public HibernateExceptionTranslator hibernateExceptionTranslator() {
    	//System.out.println("bean hibernateexceptiontranslator");
        return new HibernateExceptionTranslator();
    }

    @Configuration
    @Profile("production")
    @Import(PropertyPlaceholderConfig.class)
    static class Production {
 	
        @Value("${hibernate.show_sql}")
        protected String hibernateShowSql;
        @Value("${hibernate.hbm2ddl_auto}")
        protected String hibernateHbm2DDL;
        @Value("${hibernate.default_schema}")
        protected String hibernateSchema;
        
        @Value("${jdbc.driverClassName}")
        protected String jdbcDriver;
        @Value("${jdbc.username}")
        protected String jdbcUsername;
        @Value("${jdbc.password}")
        protected String jdbcPassword;
        @Value("${jdbc.url}")
        protected String jdbcUrl;

        @Bean
        public SessionFactory sessionFactory() {
        	//System.out.println("Production");
            LocalSessionFactoryBean factoryBean;
            try {
                factoryBean = new LocalSessionFactoryBean();
                Properties pp = new Properties();
                pp.setProperty("hibernate.show_sql", hibernateShowSql);
                pp.setProperty("hibernate.hbm2ddl.auto", hibernateHbm2DDL);
                pp.setProperty("hibernate.default_schema", hibernateSchema);

                factoryBean.setDataSource(dataSource());
                factoryBean.setPackagesToScan("it.cle.project.model");
                factoryBean.setHibernateProperties(pp);
                factoryBean.afterPropertiesSet();
                return factoryBean.getObject();
            } catch (Exception e) {
                log.error("Couldn't configure the sessionFactory bean", e);
            }
            throw new RuntimeException("Couldn't configure the sessionFactory bean");
        }

        @Bean
        public DataSource dataSource() {
        	DriverManagerDataSource ds = new DriverManagerDataSource();
            ds.setDriverClassName(jdbcDriver);
            ds.setUsername(jdbcUsername);
            ds.setPassword(jdbcPassword);
            ds.setUrl(jdbcUrl);
            return ds;
        }
    }

    @Configuration
    //@Profile("dev")
    @Import(PropertyPlaceholderConfig.class)
    static class Tests {

    	@Value("${test.hibernate.show_sql}")
        protected String hibernateShowSql;
        @Value("${test.hibernate.hbm2ddl_auto}")
        protected String hibernateHbm2DDL;
        @Value("${test.hibernate.default_schema}")
        protected String hibernateSchema;
        
        @Value("${test.jdbc.driverClassName}")
        protected String jdbcDriver;
        @Value("${test.jdbc.username}")
        protected String jdbcUsername;
        @Value("${test.jdbc.password}")
        protected String jdbcPassword;
        @Value("${test.jdbc.url}")
        protected String jdbcUrl;
        

        @Bean
        public PlatformTransactionManager transactionManager() {
           return new HibernateTransactionManager(sessionFactory());
        }
        
       /* @Bean
        @Autowired
        public HibernateTransactionManager transactionManager(SessionFactory s) {
           HibernateTransactionManager txManager = new HibernateTransactionManager();
           txManager.setSessionFactory(s);
           return txManager;
        }*/

        
        @Bean
        public SessionFactory sessionFactory() {
        	//System.out.println("Dev");
        	//System.out.println("session factory bean");
            LocalSessionFactoryBean factoryBean;
            try {
                factoryBean = new LocalSessionFactoryBean();
                Properties pp = new Properties();
                pp.setProperty("hibernate.show_sql", hibernateShowSql);
                pp.setProperty("hibernate.hbm2ddl.auto", hibernateHbm2DDL);
                pp.setProperty("hibernate.default_schema", hibernateSchema);
                //System.out.println("hibernateschema = " + hibernateSchema);
                //System.out.println("hibernate auto = " + hibernateHbm2DDL);
                factoryBean.setDataSource(dataSource());
                factoryBean.setPackagesToScan("it.cle.project.model");
                factoryBean.setHibernateProperties(pp);
                factoryBean.afterPropertiesSet();
                return factoryBean.getObject();
            } catch (Exception e) {
                log.error("Couldn't configure the sessionFactory bean", e);
            }
            throw new RuntimeException("Couldn't configure the sessionFactory bean");
        }
        
       /* @Bean
        public LocalSessionFactoryBean sessionFactory() {
            LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
            sessionFactory.setDataSource(dataSource());
            sessionFactory.setPackagesToScan(new String[] { "it.cle.project.model" });
            Properties pp = new Properties();
            pp.setProperty("hibernate.show_sql", hibernateShowSql);
            pp.setProperty("hibernate.hbm2ddl.auto", hibernateHbm2DDL);
            pp.setProperty("hibernate.default_schema", hibernateSchema);
            sessionFactory.setHibernateProperties(pp);
            return sessionFactory;
         }*/


        @Bean
        public DataSource dataSource() {
        	//System.out.println("bean datasource");
        	DriverManagerDataSource ds = new DriverManagerDataSource();
            ds.setDriverClassName(jdbcDriver);
            ds.setUsername(jdbcUsername);
            ds.setPassword(jdbcPassword);
            ds.setUrl(jdbcUrl);
            return ds;
        }
    }
}